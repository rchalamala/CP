#include <cstddef>

template<typename uT> struct FunctionNode
{
	using T = uT;

	FunctionNode()
	{

	}
};

template<class uNode> struct Function
{
	using Node = uNode;
	using T = typename Node::T;

	Node identity{};

	T return_value(const Node& element)
	{
		return element.value;
	}

	Node merge(const Node& lhs, const Node& rhs)
	{
		return operation(lhs, rhs);
	}

	void propagate_update(Node& parent, Node& leftChild, Node& rightChild, const std::size_t& treeLeft, const std::size_t& treeRight, const std::size_t& queryLeft, const std::size_t& queryRight, const std::size_t& treeSize)
	{
		delta(leftChild) = delta(parent);
		delta(rightChild) = delta(parent);
		parent += delta(parent);
		delta(parent) = 0;
	}

	void change(Node& element, const std::size_t& queryLeft, const std::size_t& queryRight, const std::size_t& treeSize)
	{

	}
};

// segment_tree_functions are built off of segment_tree_add.hpp if possible