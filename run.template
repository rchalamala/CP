#include "%TaskFile%"
#include <algorithm>
#include <cctype>
#include <chrono>
#include <cmath>
#include <iostream>
#include <iterator>
#include <sstream>
#include <string>
#include <utility>
#include <vector>

namespace JHelper
{
	static std::string trim(std::string data)
	{
		for(std::size_t index = 1; index < data.size(); ++index)
		{
			if(data.at(index) == '\n')
			{
				while(index && std::isblank(data.at(index - 1)))
				{
					data.erase(index - 1, 1);
					--index;
				}
			}
		}
		while(!data.empty() && std::isspace(data.back()))
		{ data.pop_back(); }
		return data;
	}

	struct Test
	{
		std::string m_input, m_output;
		bool m_active, m_hasOutput;

		Test(const std::string& input, const std::string& output, const bool& active, const bool& hasOutput) : m_input{trim(input)}, m_output{trim(output)}, m_active{active}, m_hasOutput{hasOutput} {}

		bool check(const std::string& output) const { return output == m_output; }

		void set_output(const std::string& output)
		{
			m_output = trim(output);
			m_hasOutput = true;
		}

		std::string& input() { return this->m_input; }

		std::string& output() { return m_output; }

		bool& active() { return m_active; }

		bool& has_output() { return m_hasOutput; }
	};
}

std::string red{"\x1B[31m"}, green{"\x1B[32m"}, yellow{"\x1B[33m"}, blue{"\x1B[34m"}, original{"\033[0m"};

std::uint32_t testID{}, correctTests{}, totalTests{};
std::chrono::duration<long double, std::milli> testTime{};
bool testOK{}, actualBruteForce{};
std::string testOutput{};

void run_test(JHelper::Test& test, const std::int64_t& stressTestIteration = 0, const bool& showTestingOutput = false, const bool& showAllTestingOutput = false)
{
	if(!stressTestIteration)
	{ std::cerr << blue << "Test #" << ++testID << original << std::endl; }
	if(showAllTestingOutput)
	{ std::cerr << blue << "Stress Test #" << stressTestIteration << original << std::endl; }
	if(!stressTestIteration || showAllTestingOutput)
	{
		std::cerr << blue << "Input:" << std::endl << original << test.input() << std::endl;
		std::cerr << blue << "Expected output:" << std::endl << original;
		if(test.has_output())
		{ std::cerr << test.output(); }
		else
		{ std::cerr << yellow << "N/A" << original; }
		std::cerr << std::endl;
	}
	if(test.active())
	{
		std::istringstream in(test.input());
		std::cin.rdbuf(in.rdbuf());
		std::streambuf* cin_rdbuf{std::cin.rdbuf()};
		std::ostringstream out;
		std::streambuf* cout_rdbuf{std::cout.rdbuf()};
		std::cout.rdbuf(out.rdbuf());
		std::chrono::time_point<std::chrono::high_resolution_clock> start{std::chrono::high_resolution_clock::now()};
		%ClassName% solver;
		solver.setup();
		%SolverCall% testTime = std::chrono::high_resolution_clock::now() - start;
		std::cin.rdbuf(cin_rdbuf);
		std::cout.rdbuf(cout_rdbuf);
		std::string output{JHelper::trim(out.str())};
		if(!stressTestIteration || showAllTestingOutput)
		{ std::cerr << blue << "Actual output:" << std::endl << original << output << std::endl; }
		if(test.has_output())
		{
			if(%ClassName%::floatingPointVerification)
			{
				/*
				assert(std::count(std::begin(test.output()), std::end(test.output()), '.') == 1 && std::count_if(std::begin(test.output()), std::end(test.output()), [](const unsigned char& element) -> bool
				{ return std::isdigit(element); }) == std::size(test.output()) - 1);
				assert(std::count(std::begin(output), std::end(output), '.') == 1 && std::count_if(std::begin(output), std::end(output), [](const unsigned char& element) -> bool
				{ return std::isdigit(element); }) == std::size(output) - 1);
				 */
				long double testNumber{std::stold(test.output())};
				long double resultNumber{std::stold(output)};
				testOK = std::abs(testNumber - resultNumber) <= %ClassName%::EPSILON;
			}
			else
			{ testOK = test.check(output); }
			if(!stressTestIteration || showAllTestingOutput)
			{
				std::cerr << blue << "Result: " << original;
				if(testOK)
				{ std::cerr << green << "Right answer"; }
				else
				{ std::cerr << red << "Wrong answer"; }
				std::cerr << original << std::endl;
			}
		}
		else
		{ testOK = true; }
		testOutput = output;
		if(!stressTestIteration || showAllTestingOutput)
		{ std::cerr << blue << "Time: " << testTime.count() << "ms." << original << std::endl; }
		if(test.has_output() && !testOK && stressTestIteration && !showAllTestingOutput)
		{
			std::cerr << red << "Stress Test #" << stressTestIteration << original << std::endl;
			if(%ClassName%::showFalseTestOutput)
			{
				std::cerr << blue << "Input:" << std::endl << original << test.input() << std::endl;
				std::cerr << blue << "Expected output:" << std::endl << original;
				if(test.has_output())
				{ std::cerr << test.output(); }
				else
				{ std::cerr << yellow << "N/A" << original; }
				std::cerr << std::endl;
				std::cerr << blue << "Actual output:" << std::endl << original << output << std::endl;
			}
		}
	}
	else
	{ std::cerr << yellow << "SKIPPED" << original << std::endl; }
	if(!stressTestIteration || showAllTestingOutput)
	{ std::cerr << std::endl; }
	if(testOK && showTestingOutput && !showAllTestingOutput)
	{ std::cerr << (actualBruteForce ? green : yellow) << "Stress Test #" << stressTestIteration << original << std::endl; }
}

int main(int argc, char* argv[])
{
	static_assert(!%ClassName%::stressTestIterations || (%ClassName%::stressTestIterations && !%ClassName%::bruteForceAllIterations));
	std::chrono::time_point <std::chrono::high_resolution_clock> start{std::chrono::high_resolution_clock::now()};
	std::vector <JHelper::Test> tests{%Tests%};
	std::cerr << std::fixed;
	std::chrono::duration<long double, std::milli> solveMaximalTime{}, solveAverageTime{}, bruteForceMaximalTime{}, bruteForceAverageTime{};
	std::uint64_t bruteForceEmptyTestIterations{};
	%ClassName%::bruteForceSolveIteration = %ClassName%::bruteForceAllIterations;
	for(JHelper::Test& test : tests)
	{
		if(!test.has_output())
		{ assert(!(%ClassName%::bruteForceEmptyTests && %ClassName%::bruteForceAllIterations));	}
		if(!test.has_output() && %ClassName%::bruteForceEmptyTests)
		{
			%ClassName%::bruteForceSolveIteration = true;
			run_test(test, -1, false);
			%ClassName%::bruteForceSolveIteration = false;
			if(!testOutput.empty())
			{
				bruteForceMaximalTime = std::max(bruteForceMaximalTime, testTime);
				bruteForceAverageTime += testTime;
				test.set_output(testOutput);
				actualBruteForce = true;
				++bruteForceEmptyTestIterations;
			}
		}
		if(test.active())
		{
			run_test(test);
			solveMaximalTime = std::max(solveMaximalTime, testTime);
			solveAverageTime += testTime;
			correctTests += (!test.has_output() || testOK);
			++totalTests;
		}
	}
	std::int_fast64_t stressTestIteration{1};
	for(; (stressTestIteration <= %ClassName%::stressTestIterations || %ClassName%::stressTestIterations == -1) && correctTests == totalTests; ++stressTestIteration)
	{
		std::ostringstream generatedTestInput;
		std::streambuf* cout_rdbuf{std::cout.rdbuf()};
		std::cout.rdbuf(generatedTestInput.rdbuf());
		%ClassName%::generate_test(static_cast<std::uint64_t>(stressTestIteration));
		std::cout.rdbuf(cout_rdbuf);
		JHelper::Test generatedTest{JHelper::trim(generatedTestInput.str()), "", true, false};
		%ClassName%::bruteForceSolveIteration = true;
		run_test(generatedTest, -1, false);
		%ClassName%::bruteForceSolveIteration = false;
		if(!testOutput.empty())
		{
			bruteForceMaximalTime = std::max(bruteForceMaximalTime, testTime);
			bruteForceAverageTime += testTime;
			generatedTest.set_output(testOutput);
			actualBruteForce = true;
		}
		run_test(generatedTest, stressTestIteration, %ClassName%::showTestingOutput, %ClassName%::showAllTestingOutput);
		solveMaximalTime = std::max(solveMaximalTime, testTime);
		solveAverageTime += testTime;
		correctTests += (!generatedTest.has_output() || testOK);
		++totalTests;
	}
	solveAverageTime /= (tests.size() + %ClassName%::stressTestIterations);
	if(stressTestIteration > 1 && (correctTests != totalTests ||( %ClassName%::showTestingOutput && !%ClassName%::showAllTestingOutput)))
	{ std::cerr << std::endl; }
	if(totalTests)
	{
		if(correctTests == totalTests)
		{ std::cerr << green << "All Right"; }
		else if(correctTests)
		{ std::cerr << yellow << "Some Wrong"; }
		else
		{ std::cerr << red << "All Wrong"; }
		std::cerr << std::endl << correctTests << '/' << totalTests << " Correct Tests" << original << std::endl;
		std::chrono::duration<long double> totalExecutionTime{std::chrono::high_resolution_clock::now() - start};
		std::cerr << "Total execution time: " << totalExecutionTime.count() << "s." << std::endl;
		std::cerr << "Maximal solve() time: " << solveMaximalTime.count() << "ms." << std::endl;
		std::cerr << "Average solve() time: " << solveAverageTime.count() << "ms." << std::endl;
		if(actualBruteForce)
		{
			bruteForceAverageTime /=  (%ClassName%::stressTestIterations + bruteForceEmptyTestIterations);
			std::cerr << "Maximal brute_force() time: " << bruteForceMaximalTime.count() << "ms." << std::endl;
			std::cerr << "Average brute_force() time: " << bruteForceAverageTime.count() << "ms." << std::endl;
		}
	}
	else
	{ std::cerr << yellow << "NO TESTS RAN" << original << std::endl; }
}