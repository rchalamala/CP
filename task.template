#include "../library/general/base.hpp"
#include "../library/general/common_type.hpp"
#include "../library/general/input.hpp"
#include "../library/general/output.hpp"
#include "../library/general/prng.hpp"
#include "../library/general/speed.hpp"

using namespace std;

constexpr long long MAXN = static_cast<long long>(2 * 1e5 + 1);
constexpr long long INF = static_cast<long long>(1e18 + 1);

//#define INTERACTIVE
//#define CODE_JAM
//#define LIGHT_OJ

/*
#include "../library/numerical/modulo.hpp"
constexpr std::int32_t MODULUS = 1000000007;
//constexpr std::int32_t MODULUS = 998244353;
using ModularInteger = Modulo<std::integral_constant<std::decay_t<decltype(MODULUS)>, MODULUS>>;
*/

class %ClassName%
{
public:
	static constexpr std::int64_t stressTestIterations{};
	static constexpr bool bruteForceAllIterations{};
	static constexpr bool bruteForceEmptyTests{};
	static constexpr bool showTestingOutput{};
	static constexpr bool showAllTestingOutput{};
	static constexpr bool showFalseTestOutput{true};
	static bool bruteForceSolveIteration;

	void static generate_test(std::ostream& out, const std::uint64_t& seed)
	{
		std::mt19937_64 prng{seed};

	}

	void brute_force()
	{

	}

	void setup()
	{
		testCase = {};

	}

	void solve(std::istream& in, std::ostream& out)
	{
		#if defined(CODE_JAM) || defined(LIGHT_OJ)
		output_case(out);
		#endif
		if(bruteForceAllIterations || bruteForceSolveIteration)
		{
			brute_force();
			return;
		}
		solve();
	}

private:

	static std::uint64_t testCase;
	
	static void output_case(std::ostream& out)
	{
		#if defined(CODE_JAM) || defined(LIGHT_OJ)
		std::cout << "Case ";
		#endif
		#ifdef CODE_JAM
		std::cout << '#';
		#endif
		#if defined(CODE_JAM) || defined(LIGHT_OJ)
		std::cout << (testCase += (bruteForceAllIterations || (stressTestIterations || bruteForceEmptyTests) && bruteForceSolveIteration)) << ": ";
		#endif
	}

public:

	void solve()
	{

	}
};

std::uint64_t %ClassName%::testCase{};
bool %ClassName%::bruteForceSolveIteration{};
