#include "../library/general/base.hpp"
#include "../library/general/input.hpp"
#include "../library/general/output.hpp"
#include "../library/general/speed.hpp"

using namespace std;

constexpr long long MAXN = static_cast<long long>(2 * 1e5 + 1);
constexpr long long INF = static_cast<long long>(1e18 + 1);

//#define INTERACTIVE
//#define CODE_JAM
//#define LIGHT_OJ

class %ClassName%
{
public:
	static constexpr std::int64_t stressTestIterations = 0;
	static constexpr bool bruteForceAllIterations = false;
	static constexpr bool bruteForceEmptyTests = false;
	static constexpr bool showTestingOutput = false;
	static constexpr bool showAllTestingOutput = false;
	static constexpr bool showFalseTestOutput = true;
	static bool bruteForceSolveIteration;

	void static generate_test(std::ostream& testOutput, const std::uint_fast64_t& seed)
	{
		unused(testOutput);
		std::srand(seed);
		std::mt19937_64 prng{seed};

	}

	void brute_force(std::istream& in, std::ostream& out)
	{
		unused(in, out);

		return;
	}

	void setup()
	{

	}

private:

	static void output_case(std::ostream& out)
	{
		static std::uint64_t testCase = 0;
		out << "Case ";
		#ifdef CODE_JAM
		out << '#';
		#endif
		out << ++testCase << ": ";
	}

public:

	void solve(std::istream& in, std::ostream& out)
	{
		#if defined(CODE_JAM) || defined(LIGHT_OJ)
		%ClassName%::output_case(out);
		#endif
		if(%ClassName%::bruteForceAllIterations || %ClassName%::bruteForceSolveIteration)
		{
			brute_force(in, out);
			return;
		}

	}

};

bool %ClassName%::bruteForceSolveIteration{};
